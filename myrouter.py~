#Project Co-Conspirators: Zach Abt and Cory Nettnin

#!/usr/bin/env python3


'''
Basic IPv4 router (static routing) in Python.
'''

import sys
import os
import time
from switchyard.lib.packet import *
from switchyard.lib.address import *
from switchyard.lib.common import *

class Router(object):
    def __init__(self, net):
        self.net = net
        self.interfaces = {}
        self.dev_to_eth = {}
        self.arpcache = {}
        self.forwardingtable = []
        self.packet_queue = [] #the queue that packets sit in while waiting for arpcache to fill
        self.arp_requests = {} #the dict that keeps track of current ARP requests - IP:(# of requests, sent time)

        for interface in net.interfaces():
            self.interfaces[interface.ipaddr] = interface.ethaddr #fills dict for interfaces
            self.dev_to_eth[interface.name] = interface.ethaddr
            xprefix = IPv4Address(int(interface.ipaddr) & int(interface.netmask))
            self.forwardingtable.append((xprefix, interface.netmask, interface.ipaddr, interface.name))
        tablefile = open('forwarding_table.txt', 'r')
        for line in tablefile:
            linesplit = line.split()
            if len(linesplit) == 4:
                self.forwardingtable.append(( IPv4Address(linesplit[0]) , IPv4Address(linesplit[1]), IPv4Address(linesplit[2]), linesplit[3] ))
        print(str(self.interfaces))
        print(str(self.forwardingtable))
        print("Dev to eth: " + str(self.dev_to_eth))


    def eth_header(self, src, dst, ethtype):
        ethheader = ethernet.Ethernet()
        ethheader.src = src
        ethheader.dst = dst

        if ethtype == "ARP":
            ethheader.ethertype = EtherType.ARP
        else:
            ethheader.ethertype = EtherType.IPv4

        return ethheader


    def arp_header(self, op, src_eth, dst_eth, src_ip, dst_ip):
        arpheader = ethernet.Arp()
        if op == "request":
            arpheader.operation = ArpOperation.Request
        elif op == "reply":
            arpheader.operation = ArpOperation.Reply
        arpheader.senderhwaddr = src_eth
        arpheader.targethwaddr = dst_eth
        arpheader.senderprotoaddr = src_ip
        arpheader.targetprotoaddr = dst_ip

        return arpheader


    def check_packet_queue(self):
        index = 0
        while (index < len(self.packet_queue)):
            dest_IP = self.packet_queue[index][0]
            dest_ip_match = self.packet_queue[index][1]
            #print(str(dest_ip_match[2]))
            #print(str(self.arpcache))
            if dest_IP in self.arpcache:
                #print("Is it in the arpcache?")
                newpacket = self.packet_queue[index][2]
                newpacket += self.eth_header(self.dev_to_eth[dest_ip_match[3]], self.arpcache[dest_IP], "IPv4")
                self.net.send_packet(dest_ip_match[3], newpacket)
                self.packet_queue.pop(index)
            else:
                index += 1

            if dest_ip_match[2] not in self.arp_requests:
                self.packet_queue.pop(index)


    def check_arp_requests(self):
        tempdel = []
        for IP,requestinfo in self.arp_requests.items():
            #print("Original for loop")
            #print(str(requestinfo[2]))
            #print(str(self.arpcache))
            if requestinfo[0] > 5 or requestinfo[2] in self.arpcache:
                #print("if")
                #del self.arp_requests[IP]
                tempdel.append(IP)

            elif (time.time() - requestinfo[1]) >= 1 and requestinfo[0] < 5:
                #print("elif 1")
                arprequest = packet.Packet()
                arprequest += self.eth_header(self.interfaces[IP], 'ff:ff:ff:ff:ff:ff', "ARP")
                arprequest += self.arp_header("request", self.interfaces[IP], 'ff:ff:ff:ff:ff:ff', IP, requestinfo[2])
                #arprequest += self.arp_header("request", self.interfaces[requestinfo[2]], 'ff:ff:ff:ff:ff:ff', requestinfo[2], IP)
                for entry in self.forwardingtable:
                    if entry[2] == IP:
                        self.net.send_packet(entry[3], arprequest)
                requestinfo[1] = time.time()

                requestinfo[0] += 1

            elif (time.time() - requestinfo[1]) >= 1 and requestinfo[0] == 5:
                #print("elif 2")
                requestinfo[0] += 1
            
            #else, if time is less than 1 second, but ARP requests are still going, do nothing
        for item in tempdel:
            del self.arp_requests[item]

    def router_main(self):    
        '''
        Main method for router; we stay in a loop in this method, receiving
        packets until the end of time.
        '''
        while True:
            #print(str(self.arpcache))
            #print(str(self.arp_requests))
            #print("LOOPOOOOOOP")
            self.check_packet_queue()
            self.check_arp_requests()

            pkttype = ""
            gotpkt = True
            try:
                dev,pkt = self.net.recv_packet(timeout=1.0)
            except NoPackets:
                log_debug("No packets available in recv_packet")
                gotpkt = False
            except Shutdown:
                log_debug("Got shutdown signal")
                break

            if gotpkt:
                log_debug("Got a packet: {}".format(str(pkt)))
                arp = pkt.get_header(Arp)


            if arp is not None:
                #self.arpcache[arp.senderprotoaddr] = arp.senderhwaddr
                if arp.operation == ArpOperation.Request:
                    if arp.targetprotoaddr in self.interfaces:
                        target_ethaddr = self.interfaces[arp.targetprotoaddr]
                        arpreply = packet.Packet()

                        arpreply += self.eth_header(target_ethaddr, arp.senderhwaddr, "ARP")
                        arpreply += self.arp_header("reply", target_ethaddr, arp.senderhwaddr, arp.targetprotoaddr, arp.senderprotoaddr)

                        self.net.send_packet(dev, arpreply)
                elif arp.operation == ArpOperation.Reply:
                    self.arpcache[arp.senderprotoaddr] = arp.senderhwaddr
                    #print(str(self.arpcache))

            else:
                eth = pkt.get_header(Ethernet)
                ip = pkt.get_header(IPv4)
                icmp = pkt.get_header(ICMP)
                ip.ttl -= 1
                #self.arpcache[ip.srcip] = eth.src
                print("Beginning of else: " + str(ip.dstip))
                dest_ip_match = self.table_lookup(ip)
                present_in_cache = 0

                newpacket = packet.Packet()
                if icmp is not None:
                    newpacket += icmp
                newpacket += ip

                if ip.dstip in self.arpcache:
                    print("In arpcache: " + str(ip.dstip))
                    print("")
                    newpacket += self.eth_header(self.dev_to_eth[dest_ip_match[3]], self.arpcache[ip.dstip], "IPv4")
                    self.net.send_packet(dest_ip_match[3], newpacket)
                    present_in_cache = 1

                #print(str(self.arp_requests))
                if present_in_cache == 0 and ip.dstip not in self.arp_requests:
                    print("Not in arpcache: " + str(ip.dstip))
                    arprequest = packet.Packet()
                    #print("Does it get to the end of the loop after line 10?")
                    print("Dest IP Match Prefix: " + str(dest_ip_match[0]))
                    print("Dest IP Match: " + str(dest_ip_match[2]))
                    print("")
                    #print(str(self.interfaces))
                    arprequest += self.eth_header(self.dev_to_eth[dest_ip_match[3]], 'ff:ff:ff:ff:ff:ff', "ARP")
                    arprequest += self.arp_header("request", self.dev_to_eth[dest_ip_match[3]], 'ff:ff:ff:ff:ff:ff', dest_ip_match[2], ip.dstip)
                    #for entry in self.forwardingtable:
                        #if entry[2] == dest_ip_match[2]:
                    self.net.send_packet(dest_ip_match[3], arprequest)
                    self.arp_requests[dest_ip_match[2]] = (1, time.time(), ip.dstip) #first and last may need to switch
                    #self.arp_requests[ip.dstip] = (1, time.time(), dest_ip_match[2])
                if present_in_cache == 0:
                    self.packet_queue.append((ip.dstip, dest_ip_match, newpacket))

    def table_lookup(self, ip):
        bestentry = (0,0,0,0) #empty entry for now
        bestentrylen = 0
        destaddr = ip.dstip

        for entry in self.forwardingtable:
            #print("Best entry: " + str(bestentry))
            #print("Best entry length: " + str(bestentrylen))
            #print(str(entry))
            netaddr = IPv4Network(str(entry[0]) + "/" + str(entry[1]))
            #print(str(entry[0]) + "/" + str(entry[1]))
            match = (int(entry[0]) & int(destaddr)) == int(entry[0])
            if (match == True) and (netaddr.prefixlen > bestentrylen):
                bestentry = entry
                bestentrylen = netaddr.prefixlen

        #print("Final Best entry: " + str(bestentry))
        #print("Final Best entry length: " + str(bestentrylen))
        
        return bestentry
            


def switchy_main(net):
    '''
    Main entry point for router.  Just create Router
    object and get it going.
    '''
    r = Router(net)
    r.router_main()
    net.shutdown()
